Falco is used to detect runtime alerts like shells or new processes being spawned 
or sensitive files being read. 

Detecting first actions: 

Installing Falco to the VM: 
https://falco.org/docs/getting-started/installation/
- I used this: 
https://falco.org/docs/getting-started/installation/#debian


Installing Falco Sidekick via Helm: 

1. root@devsecops-cloud:~$ kubectl create namespace falco
namespace/falco create

2. helm repo add falcosecurity https://falcosecurity.github.io/charts
helm install falco falcosecurity/falco \
--set falcosidekick.enabled=true \
--set falcosidekick.webui.enabled=true \
-n falco 

3. root@devsecops-cloud:~$ kubectl -n falco get all
- update the ui service so that it is set to NodePort



Rules are located here: 
root@devsecops-cloud:/etc/falco$ ls
falco.yaml              falco_rules.yaml      rules.available
falco_rules.local.yaml  k8s_audit_rules.yaml  rules.d

You can add rules in the falco_rules.local.yaml as this will take priority

Watch logs: 
root@devsecops-cloud:/etc/falco$ falco
Mon Sep 27 21:23:28 2021: Falco version 0.29.1 (driver version 17f5df52a7d9ed6bb12d3b1768460def8439936d)


Testing with exec:

root@devsecops-cloud:~$ kubectl exec -ti node-app-6b8496456-ltxx4 /bin/sh
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
/usr/src/app #

root@devsecops-cloud:/$ falco
...
14:06:24.910753591: Notice A shell was spawned in a container with an attached terminal (user=root 
user_loginuid=-1 k8s_node-service_node-app-6b8496456-ltxx4_default_e84a614c-d63b-411e-b5ea-806e18cca209_7 (id=8d9d45dc45dc) shell=sh parent=runc cmdline=sh terminal=34816 container_id=8d9d45dc45dc image=siddharth67/node-service)
...

Falco rules are located: 
/etc/falco/falco_rules.yaml

example rule based on above alert: 

root@devsecops-cloud:~$ cat /etc/falco/falco_rules.yaml | grep -i "A shell was spawned in a container with an attached terminal" -A15 -B20
- rule: System user interactive
  desc: an attempt to run interactive commands by a system (i.e. non-login) user
  condition: spawned_process and system_users and interactive and not user_known_system_user_login 
  output: "System user ran an interactive command (user=%user.name user_loginuid=%user.loginuid command=%proc.cmdline container_id=%container.id image=%container.image.repository)"
  priority: INFO
  tags: [users, mitre_remote_access_tools]

# In some cases, a shell is expected to be run in a container. For example, configuration
# management software may do this, which is expected.
- macro: user_expected_terminal_shell_in_container_conditions
  condition: (never_true)

- rule: Terminal shell in container
  desc: A shell was used as the entrypoint/exec point into a container with an attached terminal.  
  condition: >
    spawned_process and container
    and shell_procs and proc.tty != 0
    and container_entrypoint
    and not user_expected_terminal_shell_in_container_conditions
  output: >
    A shell was spawned in a container with an attached terminal (user=%user.name user_loginuid=%user.loginuid %container.info
    shell=%proc.name parent=%proc.pname cmdline=%proc.cmdline terminal=%proc.tty container_id=%container.id image=%container.image.repository)
  priority: NOTICE
  tags: [container, shell, mitre_execution]

# For some container types (mesos), there isn't a container image to
# work with, and the container name is autogenerated, so there isn't
# any stable aspect of the software to work with. In this case, we
# fall back to allowing certain command lines.

- list: known_shell_spawn_cmdlines
  items: [
    '"sh -c uname -p 2> /dev/null"',
    '"sh -c uname -s 2>&1"',
    '"sh -c uname -r 2>&1"',
    '"sh -c uname -v 2>&1"',

To enable Slack alerts I first created a new app to generate a webhook 
Webhook was checked in by mistake, and invalidated 

https://falco.org/blog/extend-falco-outputs-with-falcosidekick/

kubectl create namespace falco

root@devsecops-cloud:/etc/falco$ 
helm upgrade falco falcosecurity/falco --set falcosidekick.enabled=true --set falcosidekick.webui.enabled=true --set falcosidekick.config.slack.webhookurl="https://hooks.slack.com/services/XXX/XXX/XXX" --set falcosidekick.config.customfields="environment:production\,datacenter:NH" -n falco

This will update the falco namesapce with the new settings
